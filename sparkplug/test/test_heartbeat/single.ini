[connection:main]
# The host (or host:port) of the broker node to connect to.
host = rabbitmq
# The virtual host to connect to.
virtual_host = /
# The user to connect as.
userid = guest
# The user's password.
password = guest
# If set, forces the use of SSL to connect to the broker.
ssl = False
qos = 32

[queue:events]
# Will the queue be declared as durable, and survive broker restarts?
durable = False
# Will the queue be declared as auto-deleted, and be removed if all
# consumers exit?
auto_delete = False
# Is the queue exclusive to this program?
exclusive = False

[exchange:postoffice]
# The exchange type ('direct', 'fanout', or 'topic')
type = direct
# Will the exchange be declared as durable, and survive broker restarts?
durable = False
# Will the exchange be declared as auto-deleted, and be removed if all
# producers exit?
auto_delete = False

[binding:postoffice/events]
# The name of the queue to bind
queue = events
# The exchange to bind to.
exchange = postoffice
# The routing key to bind under (optional for some exchange types)
routing_key = events

[time_reporter:mylogger]
use = sparkplug#logger
aggregation_count = 10
level = INFO

[consumer:heartbeat]
# Entry point identifier
use = sparkplug#heartbeat
# Queue to consume against
queue = events
time_reporters = mylogger

# Configure Python logging
#
[loggers]
keys=root

[handlers]
keys=consoleHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=
